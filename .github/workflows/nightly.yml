name: Deploy (after successful build and test)

on:
  push:
    branches:
    - test
  schedule:
    - cron: "0 0 * * *"

jobs:
  nightly:
    name: nightly deploy
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
      with:
        repository: medyan-dev/medyan
        token: ${{ secrets.MEDYAN_BOT_PAT_REPO }}
        path: medyan
        fetch-depth: 0
    - uses: actions/checkout@v3
      with:
        repository: medyan-dev/medyan-public
        path: medyan-public
        fetch-depth: 0

    - name: zip source
      working-directory: medyan
      run: |
        cd .. && zip -r medyan.zip medyan

    - name: deploy source
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: https://uploads.github.com/repos/medyan-dev/medyan-public/releases/65013247/assets{?name,label}
        release_id: 65013247
        asset_path: ./medyan.zip
        asset_name: medyan-nightly.zip
        asset_content_type: application/zip
        max_releases: 1

    # - name: prepare dependencies (ubuntu)
    #   if: matrix.os == 'ubuntu-latest'
    #   working-directory: medyan
    #   run: |
    #     # Install apptainer.
    #     sudo apt-get update
    #     sudo apt-get install -y wget
    #     cd /tmp
    #     wget https://github.com/apptainer/apptainer/releases/download/v1.1.2/apptainer_1.1.2_amd64.deb
    #     sudo apt-get install -y ./apptainer_1.1.2_amd64.deb
    #     # Install singularity.
    #     sudo apt-get update && sudo apt-get install -y \
    #       build-essential \
    #       libssl-dev \
    #       uuid-dev \
    #       libgpgme11-dev \
    #       squashfs-tools \
    #       libseccomp-dev \
    #       pkg-config
    #     export VERSION=1.11 OS=linux ARCH=amd64 && \
    #       wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \
    #       sudo tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \
    #       rm go$VERSION.$OS-$ARCH.tar.gz
    #     echo 'export GOPATH=${HOME}/go' >> ~/.bashrc && \
    #       echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc && \
    #       source ~/.bashrc
    #     # go get -u github.com/golang/dep/cmd/dep
    #     export VERSION=3.0.3 && # adjust this as necessary \
    #       mkdir -p $GOPATH/src/github.com/sylabs && \
    #       cd $GOPATH/src/github.com/sylabs && \
    #       wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-${VERSION}.tar.gz && \
    #       tar -xzf singularity-${VERSION}.tar.gz && \
    #       cd ./singularity && \
    #       ./mconfig
    #     ./mconfig && \
    #       make -C ./builddir && \
    #       sudo make -C ./builddir install
    #     singularity version
    # - name: prepare dependencies (windows)
    #   working-directory: medyan
    #   if: matrix.os == 'windows-latest'
    #   run: |
    #     # Fix find_package issue.
    #     (get-content .\CMakeLists.txt) | %{$_ -replace "project\(medyan\)","project(medyan)`nset(CMAKE_FIND_USE_CMAKE_PATH TRUE)"} | Set-Content .\CMakeLists.txt
    #     .\conf.ps1
    # - name: prepare dependencies (macos)
    #   if: matrix.os == 'macos-latest'
    #   working-directory: medyan
    #   run: |
    #     brew install pkg-config
    #     sed -i '' -e 's/-mtune=native -march=native/-mavx/g' CMakeLists.txt
    #     ./conf.sh

    # - name: build (windows with MSBuild)
    #   if: matrix.os == 'windows-latest'
    #   working-directory: medyan
    #   run: |
    #     cd build
    #     & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe" .\MEDYAN.sln /property:Configuration=Release /property:Platform=x64
    #     ls Release
    # - name: build (macos with make)
    #   if: matrix.os == 'macos-latest'
    #   working-directory: medyan
    #   run: |
    #     cd build
    #     make VERBOSE=1
    #     ls build
    # - name: build and test (ubuntu with apptainer)
    #   if: matrix.os == 'ubuntu-latest'
    #   working-directory: medyan-public
    #   run: |
    #     cd apptainer && \
    #       apptainer build --writable-tmpfs medyan-5.4.0-avx2.sif medyan-5.4.0-avx2.def && \
    #       ls .

    # - name: run tests (windows)
    #   if: matrix.os == 'windows-latest'
    #   working-directory: medyan
    #   run: |
    #     .\build\Release\medyan.exe test
    # - name: run tests (macos)
    #   if: matrix.os == 'macos-latest'
    #   working-directory: medyan
    #   run: |
    #     ./build/medyan test

    # - name: bundle files (windows)
    #   if: matrix.os == 'windows-latest'
    #   working-directory: medyan
    #   run: |
    #     $compress = @{
    #       Path = ".\build\Release\medyan.exe"
    #       CompressionLevel = "Fastest"
    #       DestinationPath = ".\build\Release\medyan.zip"
    #     }
    #     Compress-Archive @compress
    # - name: bundle files (macos/ubuntu)
    #   if: matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest'
    #   working-directory: medyan
    #   run: |
    #     cd build
    #     zip medyan.zip medyan

    # - name: deploy release (ubuntu)
    #   if: matrix.os == 'ubuntu-latest'
    #   uses: WebFreak001/deploy-nightly@v1.1.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: https://uploads.github.com/repos/medyan-dev/medyan-public/releases/65013247/assets{?name,label}
    #     release_id: 65013247
    #     asset_path: ./medyan/build/medyan.zip
    #     asset_name: medyan-x86_64-linux.zip
    #     asset_content_type: application/zip
    #     max_releases: 1
    # - name: deploy release (windows)
    #   if: matrix.os == 'windows-latest'
    #   uses: WebFreak001/deploy-nightly@v1.1.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: https://uploads.github.com/repos/medyan-dev/medyan-public/releases/65013247/assets{?name,label}
    #     release_id: 65013247
    #     asset_path: .\medyan\build\Release\medyan.zip
    #     asset_name: medyan-x86_64-win.zip
    #     asset_content_type: application/zip
    #     max_releases: 1
    # - name: deploy release (macos)
    #   if: matrix.os == 'macos-latest'
    #   uses: WebFreak001/deploy-nightly@v1.1.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: https://uploads.github.com/repos/medyan-dev/medyan-public/releases/65013247/assets{?name,label}
    #     release_id: 65013247
    #     asset_path: ./medyan/build/medyan.zip
    #     asset_name: medyan-x86_64-macos.zip
    #     asset_content_type: application/zip
    #     max_releases: 1
